# -*- coding: utf-8 -*-
"""Dataset Timeseries

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qRsvGucnKG13SDumtb6aGb5OaErm8wQC

**TIME SERIES PROJECT**<br>
Dibuat oleh : Saadillah Noer<br>
Email : saadillahnoer@gmail.com

**Import Libraries**<br>
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

"""**Read Data**<br>"""

data_train = pd.read_csv('DJIA 30 Stock.csv')
data_train.head()

data_train.info()

"""**Mengecek Nilai Hilang dari Isnull**<br>"""

data_train.isnull().sum()

date = data_train['Date'].values
Close = data_train['Close'].values


plt.figure(figsize=(15,5))
plt.plot(date, Close)
plt.title('Temperature average',
          fontsize=20);

data_train['Close'].fillna(data_train['Close'].mean(), inplace=True)

"""**Split Data**<br>"""

#Import split data
from sklearn.model_selection import train_test_split

train, test = train_test_split(data_train.Close, test_size=0.2, shuffle=False)

print(len(train))
print(len(test))

#Validation Set 
dates = data_train['Date'].values
values  = data_train['Close'].values

x_train, x_test, y_train, y_test = train_test_split(values, dates, test_size = 0.2, shuffle=False)
print()

"""**Windowed Dataset**<br>"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w:w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

"""**Model LSTM & Sequential**<br>"""

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
                                    tf.keras.layers.LSTM(60, return_sequences=True),
                                    tf.keras.layers.LSTM(60),
                                    tf.keras.layers.Dense(30, activation="relu"),
                                    tf.keras.layers.Dense(10, activation="relu"),
                                    tf.keras.layers.Dense(1),
])

"""**Model Learning Rate & Optimizer**<br>"""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set,epochs=10)

"""**Compare MAE and 10% Scale Data**<br>"""

minMAE = (data_train['Close'].max() - data_train['Close'].min()) * (10/100)
minMAE